// Code generated by ent, DO NOT EDIT.

package accesslog

import (
	"entgo.io/ent/dialect/sql"
	"go.orx.me/echosrv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldID, id))
}

// CreatedUnix applies equality check predicate on the "created_unix" field. It's identical to CreatedUnixEQ.
func CreatedUnix(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreatedUnix, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldPath, v))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldMethod, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// Ua applies equality check predicate on the "ua" field. It's identical to UaEQ.
func Ua(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUa, v))
}

// CreatedUnixEQ applies the EQ predicate on the "created_unix" field.
func CreatedUnixEQ(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreatedUnix, v))
}

// CreatedUnixNEQ applies the NEQ predicate on the "created_unix" field.
func CreatedUnixNEQ(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldCreatedUnix, v))
}

// CreatedUnixIn applies the In predicate on the "created_unix" field.
func CreatedUnixIn(vs ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldCreatedUnix, vs...))
}

// CreatedUnixNotIn applies the NotIn predicate on the "created_unix" field.
func CreatedUnixNotIn(vs ...int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldCreatedUnix, vs...))
}

// CreatedUnixGT applies the GT predicate on the "created_unix" field.
func CreatedUnixGT(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldCreatedUnix, v))
}

// CreatedUnixGTE applies the GTE predicate on the "created_unix" field.
func CreatedUnixGTE(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldCreatedUnix, v))
}

// CreatedUnixLT applies the LT predicate on the "created_unix" field.
func CreatedUnixLT(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldCreatedUnix, v))
}

// CreatedUnixLTE applies the LTE predicate on the "created_unix" field.
func CreatedUnixLTE(v int) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldCreatedUnix, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldPath, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldMethod, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldIP, v))
}

// UaEQ applies the EQ predicate on the "ua" field.
func UaEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUa, v))
}

// UaNEQ applies the NEQ predicate on the "ua" field.
func UaNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldUa, v))
}

// UaIn applies the In predicate on the "ua" field.
func UaIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldUa, vs...))
}

// UaNotIn applies the NotIn predicate on the "ua" field.
func UaNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldUa, vs...))
}

// UaGT applies the GT predicate on the "ua" field.
func UaGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldUa, v))
}

// UaGTE applies the GTE predicate on the "ua" field.
func UaGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldUa, v))
}

// UaLT applies the LT predicate on the "ua" field.
func UaLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldUa, v))
}

// UaLTE applies the LTE predicate on the "ua" field.
func UaLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldUa, v))
}

// UaContains applies the Contains predicate on the "ua" field.
func UaContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldUa, v))
}

// UaHasPrefix applies the HasPrefix predicate on the "ua" field.
func UaHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldUa, v))
}

// UaHasSuffix applies the HasSuffix predicate on the "ua" field.
func UaHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldUa, v))
}

// UaEqualFold applies the EqualFold predicate on the "ua" field.
func UaEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldUa, v))
}

// UaContainsFold applies the ContainsFold predicate on the "ua" field.
func UaContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldUa, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.NotPredicates(p))
}
