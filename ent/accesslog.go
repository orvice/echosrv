// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.orx.me/echosrv/ent/accesslog"
)

// AccessLog is the model entity for the AccessLog schema.
type AccessLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedUnix holds the value of the "created_unix" field.
	CreatedUnix int `json:"created_unix,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Ua holds the value of the "ua" field.
	Ua           string `json:"ua,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldID, accesslog.FieldCreatedUnix:
			values[i] = new(sql.NullInt64)
		case accesslog.FieldPath, accesslog.FieldMethod, accesslog.FieldIP, accesslog.FieldUa:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessLog fields.
func (al *AccessLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesslog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case accesslog.FieldCreatedUnix:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_unix", values[i])
			} else if value.Valid {
				al.CreatedUnix = int(value.Int64)
			}
		case accesslog.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				al.Path = value.String
			}
		case accesslog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				al.Method = value.String
			}
		case accesslog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				al.IP = value.String
			}
		case accesslog.FieldUa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ua", values[i])
			} else if value.Valid {
				al.Ua = value.String
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessLog.
// This includes values selected through modifiers, order, etc.
func (al *AccessLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AccessLog.
// Note that you need to call AccessLog.Unwrap() before calling this method if this AccessLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AccessLog) Update() *AccessLogUpdateOne {
	return NewAccessLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AccessLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AccessLog) Unwrap() *AccessLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AccessLog) String() string {
	var builder strings.Builder
	builder.WriteString("AccessLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("created_unix=")
	builder.WriteString(fmt.Sprintf("%v", al.CreatedUnix))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(al.Path)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(al.Method)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(al.IP)
	builder.WriteString(", ")
	builder.WriteString("ua=")
	builder.WriteString(al.Ua)
	builder.WriteByte(')')
	return builder.String()
}

// AccessLogs is a parsable slice of AccessLog.
type AccessLogs []*AccessLog
