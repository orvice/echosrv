image: docker:latest

services:
  - docker:dind

variables:
  CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}-${CI_BUILD_REF}
  CONTAINER_IMAGE_BRANCH:  ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_BUILD_REF_NAME}
  CONTAINER_IMAGE_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
  DOCKER_DRIVER: overlay2

  STAGING_NAMESPACE: app-stage
  PRODUCTION_NAMESPACE: app-prod

  DEPLOY_YAML: deploy/deployment.yaml
  DEPLOY_USER: gitlab-admin

  POSTGRES_USER: gorma
  POSTGRES_DB: test-${CI_BUILD_REF}
  POSTGRES_PASSWORD: gorma

  DOC_FILE: swagger.json

stages:
  - test
  - doc
  - pages
  - build
  - deploy




build:
  stage: build
  image: docker
  retry: 2
  script:
    - docker login -u "$CI_BUILD_USER"  -p "$CI_BUILD_TOKEN" $CONTAINER_IMAGE
    - docker build --pull -t $CONTAINER_IMAGE  --build-arg ARG_GOPROXY="$ARG_GOPROXY" --build-arg ARG_PROJECT_NAME=$CI_PROJECT_NAME --build-arg ARG_CI_BUILD_INFO="$CI_BUILD_INFO" .
    - docker push $CONTAINER_IMAGE
    - docker tag $CONTAINER_IMAGE $CONTAINER_IMAGE_BRANCH && docker push $CONTAINER_IMAGE_BRANCH
    - docker tag $CONTAINER_IMAGE $CONTAINER_IMAGE_LATEST && docker push $CONTAINER_IMAGE_LATEST

test:unittest:
  stage: test
  image: registry.gitlab.com/orvice/golang
  allow_failure: true
  script:
    - go test -v ./...

coverage:
  stage: test
  image: golang
  allow_failure: true
  script:
    - go install github.com/axw/gocov/gocov
    - make test
  parallel:
      matrix:
        - PLATFORM: [windows, mac, linux]

deploy-testing:
  stage: deploy
  image: dtzar/helm-kubectl
  environment:
    name: testing
  script:
    - echo ${CI_PROJECT_PATH_SLUG}
    - echo ${CI_ENVIRONMENT_SLUG}
    - echo ${KUBE_NAMESPACE}
    - kubectl config set-cluster k8s --server="${SERVER}"
    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials ${DEPLOY_USER} --token="${USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=${DEPLOY_USER}
    - kubectl config use-context default
    - sed -i "s|CONTAINER_IMAGE|${CONTAINER_IMAGE}|g" ${DEPLOY_YAML}
    - sed -i "s|CI_PROJECT_PATH_SLUG|${CI_PROJECT_PATH_SLUG}|g" ${DEPLOY_YAML}
    - sed -i "s|CI_ENVIRONMENT_SLUG|${CI_ENVIRONMENT_SLUG}|g" ${DEPLOY_YAML}
    - sed -i "s|KUBE_NAMESPACE|${KUBE_NAMESPACE}|g" ${DEPLOY_YAML}
    - kubectl apply -f ${DEPLOY_YAML}
  only:
    - master


deploy-prod:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - echo ${CI_PROJECT_PATH_SLUG}
    - echo ${CI_ENVIRONMENT_SLUG}
    - echo ${KUBE_NAMESPACE}
    - kubectl config set-cluster k8s --server="${SERVER}"
    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials ${DEPLOY_USER} --token="${USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=${DEPLOY_USER}
    - kubectl config use-context default
    - sed -i "s|CONTAINER_IMAGE|${CONTAINER_IMAGE}|g" ${DEPLOY_YAML}
    - sed -i "s|CI_PROJECT_PATH_SLUG|${CI_PROJECT_PATH_SLUG}|g" ${DEPLOY_YAML}
    - sed -i "s|CI_ENVIRONMENT_SLUG|${CI_ENVIRONMENT_SLUG}|g" ${DEPLOY_YAML}
    - sed -i "s|KUBE_NAMESPACE|${KUBE_NAMESPACE}|g" ${DEPLOY_YAML}
    - kubectl apply -f ${DEPLOY_YAML}
  when: manual
  environment:
    name: production
  only:
    - tag

doc:
  stage: doc
  image: golang
  script:
    - go mod download
    - make prepare
    - go get -u github.com/swaggo/swag/cmd/swag
    - download_url="https://github.com/go-swagger/go-swagger/releases/download/v0.23.0/swagger_linux_amd64"
    - curl -o /usr/local/bin/swagger -L'#' "$download_url"
    - chmod +x /usr/local/bin/swagger
    - make doc
  artifacts:
    name: doc
    paths:
      - $DOC_FILE
  only:
  - master

pages:
  stage: pages
  image: node
  script:
  - npm install -g redoc-cli
  - redoc-cli bundle -o public/index.html $DOC_FILE
  artifacts:
    paths:
    - public
  only:
  - master
